import { createSchema } from 'graphql-yoga';
import _ from 'lodash';

import { typeDef as categories, resolvers as categoriesResolvers } from './categories.js';
import { typeDef as products, resolvers as productsResolvers } from './products.js';
import { typeDef as reviews, resolvers as reviewsResolvers } from './reviews.js';
import { typeDef as users, resolvers as usersResolvers } from './users.js';
import { typeDef as orders, resolvers as ordersResolvers } from './orders.js';
import { typeDef as details, resolvers as detailsResolvers } from './details.js';
import { typeDef as manufacturers, resolvers as manufacturersResolvers } from './manufacturers.js';

// âœ… DÃ²ng gá»‘c: Ä‘á»‹nh nghÄ©a báº¯t buá»™c náº¿u dÃ¹ng extend
const base = `
  type Query {
    _empty: String
    salute(name: String!): String!  # âœ… ThÃªm field salute Ä‘á»ƒ trÃ¡nh middleware lá»—i
  }

  type Mutation {
    _emptyAction: String
  }
`;

// âœ… Gá»™p táº¥t cáº£ typeDef láº¡i trong 1 string
const typeDefs = `
  ${base}
  ${categories}
  ${manufacturers}
  ${details}
  ${reviews}
  ${products}
  ${users}
  ${orders}
`;

// âœ… Gá»™p toÃ n bá»™ resolvers
const resolvers = _.merge(
  categoriesResolvers,
  manufacturersResolvers,
  detailsResolvers,
  reviewsResolvers,
  productsResolvers,
  usersResolvers,
  ordersResolvers,
  {
    Query: {
      salute: (_, { name }) => `Xin chÃ o, ${name}! ðŸ‘‹`,
    },
  }
);

// âœ… Export schema cho GraphQL Yoga
export const schema = createSchema({
  typeDefs,
  resolvers,
});
